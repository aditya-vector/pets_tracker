continue
response_body
continue
response_body
continue
results.group(*group_columns).count
results.group(*group_columns).to_sql
results.group(*group_columns)
group_columns
sanitized_group_columns(group_columns)
results.group(sanitized_group_columns(group_columns)).to_sql
results.group(sanitized_group_columns(group_columns)).count
results.group(sanitized_group_columns(group_columns))
sanitized_group_columns(@params[:group_by])
continue
results.group(:type, :tracker_type).count
results.group(sanitized_group_columns(group_columns)).count
group_columns
continue
results.group(:type, :tracker_type).count
results.group(:type, :tracker_type).count.first
results.group(:type, :tracker_type).count.as_json
results.group(:type, :tracker_type).count.to_json
results.group(:type, :tracker_type).to_json
results.group(:type, :tracker_type).count
results.group(:type, :tracker_type).to_json
results.group(:type, :tracker_type).count.to_json
results.group(:type, :tracker_type).count
results.group(:type).count
results.group(:type)
results
results.group(sanitized_group_columns(group_columns))
results.group(sanitized_group_columns(group_columns)).count
group_columns
continue
@pets
continue
response.body
response
response_body
continue
response_body
continue
response_body
continue
sanitized_group_columns(group_columns)
results.group(sanitized_group_columns(group_columns)).count
sanitized_group_columns(@params[:group_by]).presence
continue
response_body
continue
response_body
continue
super(options).merge(type: 'Dog').except("lost_tracker")
super(options).merge(type: 'Dog').except(:lost_tracker)
super(options).merge(type: 'Dog')
continue
response_body['pet']
continue
json_response
JSON.parse(response.body)
response.body
response
continue
response.status
response
continue
pet_params
